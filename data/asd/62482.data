environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\asus\\AppData\\Roaming', 'ASL.LOG': 'Destination=file', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'LAPTOP-I8RN5KTF', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'GAMEFIRST': 'C:\\Program Files (x86)\\ASUS\\GameFirst\\', 'GOPATH': 'C:\\Users\\asus\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\asus', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\asus\\Desktop', 'INTELLIJ IDEA': 'C:\\Program Files\\JetBrains\\IntelliJ IDEA 2020.1.1\\bin;', 'INTELLIJ IDEA COMMUNITY EDITION': 'C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.1.1\\bin;', 'LOCALAPPDATA': 'C:\\Users\\asus\\AppData\\Local', 'LOGONSERVER': '\\\\LAPTOP-I8RN5KTF', 'NUMBER_OF_PROCESSORS': '12', 'ONEDRIVE': 'C:\\Users\\asus\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\asus\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'E:\\pycharm\\pytest\\venv\\Scripts;C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\Java\\jdk1.8.0_281\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Razer\\ChromaBroadcast\\bin;C:\\Program Files\\Razer\\ChromaBroadcast\\bin;C:\\Program Files (x86)\\Razer Chroma SDK\\bin;C:\\Program Files\\Razer Chroma SDK\\bin;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files\\dotnet\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Common Files\\Thunder Network\\KanKan\\Codecs;C:\\Go\\bin;C:\\Users\\asus\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\asus\\go\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\NetSarang\\Xshell 7\\;C:\\Program Files (x86)\\NetSarang\\Xftp 7\\;C:\\Program Files\\EmEditor;C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\\;C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python39\\;C:\\Users\\asus\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.1\\bin;;C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.1.1\\bin;;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2020.1.1\\bin;;C:\\Program Files\\JetBrains\\PyCharm 2020.1.1\\bin;;C:\\Users\\asus\\go\\bin;C:\\Program Files\\Vim\\vim82;C:\\Users\\asus\\AppData\\Roaming\\npm;C:\\Users\\asus\\.dotnet\\tools;', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 158 Stepping 10, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9e0a', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '(venv) $P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM': 'C:\\Program Files\\JetBrains\\PyCharm 2020.1.1\\bin;', 'PYCHARM COMMUNITY EDITION': 'C:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.1\\bin;', 'PYCHARM_HOSTED': '1', 'PYTHONIOENCODING': 'UTF-8', 'PYTHONPATH': 'E:\\pycharm\\pytest', 'PYTHONUNBUFFERED': '1', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\asus\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\asus\\AppData\\Local\\Temp', 'USERDOMAIN': 'LAPTOP-I8RN5KTF', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-I8RN5KTF', 'USERNAME': 'asus', 'USERPROFILE': 'C:\\Users\\asus', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'VIRTUAL_ENV': 'E:\\pycharm\\pytest\\venv', 'WINDIR': 'C:\\WINDOWS', '_OLD_VIRTUAL_PATH': 'C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\Java\\jdk1.8.0_281\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Razer\\ChromaBroadcast\\bin;C:\\Program Files\\Razer\\ChromaBroadcast\\bin;C:\\Program Files (x86)\\Razer Chroma SDK\\bin;C:\\Program Files\\Razer Chroma SDK\\bin;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files\\dotnet\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Common Files\\Thunder Network\\KanKan\\Codecs;C:\\Go\\bin;C:\\Users\\asus\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\asus\\go\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\NetSarang\\Xshell 7\\;C:\\Program Files (x86)\\NetSarang\\Xftp 7\\;C:\\Program Files\\EmEditor;C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\\;C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python39\\;C:\\Users\\asus\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.1\\bin;;C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.1.1\\bin;;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2020.1.1\\bin;;C:\\Program Files\\JetBrains\\PyCharm 2020.1.1\\bin;;C:\\Users\\asus\\go\\bin;C:\\Program Files\\Vim\\vim82;C:\\Users\\asus\\AppData\\Roaming\\npm;C:\\Users\\asus\\.dotnet\\tools;', '_OLD_VIRTUAL_PROMPT': '$P$G'})